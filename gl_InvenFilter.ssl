//#define RESERVED_ITEM00     (212) // for test

#define SFALL_SC_EVALUATION   (true)

#define SCRIPT_VERSION        " [Standart v.1.3.6]"

#include "..\m_headers\define.h"
#include "..\m_headers\command.h"
#include "..\m_headers\party.h"
#include "..\m_headers\sfall\sfall.h"
#include "..\m_headers\sfall\define_extra.h"
#include "..\m_headers\sfall\dik.h"

procedure start;
procedure CreateInvenFilterMenu(variable loot);
procedure CreateInvenFilterMenu_trader(variable loot);
procedure CreateInvenFilterMenu_trd;
procedure filter_inventory(variable filter_item_type, variable spec);
procedure filter_inventory_trader(variable filter_item_type);
procedure filter_inventory_sub(variable filter_item_type, variable spec_item, variable obj_ptr_1, variable obj_ptr_2);
procedure filter_remove_items(variable source_objptr, variable dest_objptr, variable item, variable item_pid) ;
procedure check_tile_object;
procedure Check_Party_Obj;
procedure Dude_LootParty;
procedure check_bags_items(variable ptr);
procedure restore_bags_items(variable who_ptr);
procedure Move_Dude_Inv;
procedure Add_ReservItem(variable i_count, variable obj_ptr, variable pc);
procedure Remove_ReservItem;

procedure hBarter;
procedure hUseSkills;
procedure hKeyPress;
procedure hMouseClick;

procedure inven_filter_button_toggle(variable p_btn, variable spec);
procedure inven_filter_button_pressed(variable p_btn, variable filter_item_type, variable spec);
procedure inven_filter_trd_button_toggle(variable p_btn);
procedure inven_filter_trd_button_pressed(variable p_btn, variable filter_item_type);

procedure Button_Toggle_Off;
procedure SelectCreateButton(variable p_btn, variable flag);
procedure create_btn_sub;
procedure create_btn_trd_sub;
procedure Create_btn_all(variable flag, variable trd);
procedure Create_btn_armor(variable flag, variable trd);
procedure Create_btn_weapon(variable flag, variable trd);
procedure Create_btn_ammo(variable flag, variable trd);
procedure Create_btn_drug(variable flag, variable trd);
procedure Create_btn_misc(variable flag, variable trd);
procedure subCreateButton(variable btn, variable flag, variable trd, variable vshift);
procedure DeletePressButton;
procedure DeletePressButtonTrd;
procedure subDeleteButton(variable btn, variable type, variable flag);
procedure trader_cost_win;
procedure barter_weight_win;
procedure None;

#define x_loc       (10)
#define y_loc       (6)
#define horiz_size  (46)  //button size
#define vertic_size (23)

#define item_type_misc_group (8)

#define MiscGroup(x)    (x==PID_STEALTH_BOY) or (x==PID_GEIGER_COUNTER) or (x==PID_MOTION_SENSOR) or (x==PID_ACTIVE_GEIGER_COUNTER) or (x==PID_ACTIVE_STEALTH_BOY) or \
                        (x==PID_ELECTRONIC_LOCKPICKS) or (x==PID_LOCKPICKS) or (x==PID_EXP_LOCKPICK_SET) or (x==PID_ELEC_LOCKPICK_MKII) or (x==PID_MULTI_TOOL) or (x==PID_SUPER_TOOL_KIT) or \
                        (x==PID_BIG_BOOK_OF_SCIENCE) or (x==PID_DEANS_ELECTRONICS) or (x==PID_FIRST_AID_BOOK) or (x==PID_SCOUT_HANDBOOK) or (x==PID_GUNS_AND_BULLETS)

#define Explosive(x)    (x==PID_DYNAMITE) or (x==PID_PLASTIC_EXPLOSIVES) or (x==PID_ACTIVE_DYNAMITE) or (x==PID_ACTIVE_PLASTIC_EXPLOSIVE)

#define ExcludeMisc(x)  (x!=PID_FIRST_AID_KIT) and (x!=PID_DOCTORS_BAG) and (x!=PID_PARAMEDICS_BAG) and (x!=PID_FIELD_MEDIC_KIT)
#define IncludeMisc(x)  (x==PID_FIRST_AID_KIT) or (x==PID_DOCTORS_BAG) or (x==PID_PARAMEDICS_BAG) or (x==PID_FIELD_MEDIC_KIT)

#define inven_filter_button_all     ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc and get_mouse_y < menu_y + y_loc + 21))
#define inven_filter_button_armor   ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + vertic_size and get_mouse_y < menu_y + y_loc + 21 + vertic_size))
#define inven_filter_button_weapon  ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*2) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*2)))
#define inven_filter_button_ammo    ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*3) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*3)))
#define inven_filter_button_drug    ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*4) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*4)))
#define inven_filter_button_misc    ((get_mouse_x > menu_x + x_loc and get_mouse_x < menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*5) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*5)))

#define inven_filter_trd_button_all     ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc and get_mouse_y < menu_y + y_loc + 21))
#define inven_filter_trd_button_armor   ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + vertic_size and get_mouse_y < menu_y + y_loc + 21 + vertic_size))
#define inven_filter_trd_button_weapon  ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*2) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*2)))
#define inven_filter_trd_button_ammo    ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*3) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*3)))
#define inven_filter_trd_button_drug    ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*4) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*4)))
#define inven_filter_trd_button_misc    ((get_mouse_x > t_menu_x + x_loc and get_mouse_x < t_menu_x + x_loc + horiz_size) and (get_mouse_y > menu_y + y_loc + (vertic_size*5) and get_mouse_y < menu_y + y_loc + 21 + (vertic_size*5)))

                                        //840                                       850                                           593                                         605
#define button_exit_barter          ((get_mouse_x > (screen_width_half)+263 and get_mouse_x < (screen_width_half)+278) and (get_mouse_y > (screen_height_half)+160+shift_y and get_mouse_y < (screen_height_half)+175+shift_y))
#define button_exit_barter_check    ((x_mouse > (screen_width_half)+263 and x_mouse < (screen_width_half)+278) and (y_mouse > (screen_height_half)+160+shift_y and y_mouse < (screen_height_half)+175+shift_y))

//x790 y530  1152x864/2=576x432   790-576=214    530-432=98
#define button_exit_loot            ((get_mouse_x > (screen_width_half)+207 and get_mouse_x < (screen_width_half)+223) and (get_mouse_y > (screen_height_half)+92 and get_mouse_y < (screen_height_half)+109))
#define button_exit_loot_check      ((x_mouse > (screen_width_half)+207 and x_mouse < (screen_width_half)+223) and (y_mouse > (screen_height_half)+92 and y_mouse < (screen_height_half)+109))

variable begin
   enable_filter;
   enable_weight;
   enable_caps;

   unsafe;
   sfall_ver_allowed;
   sfall_new;           // версия сфалл у которой есть новые режимы get_game_mode

   btn_toggle_off;
   btn_trd_toggle_off;

   screen_width_half, screen_height_half;
   x_mouse, y_mouse;
   sec_click;

   menu_x;
   menu_y, shift_y;
   btn_all, btn_armor, btn_weapon, btn_ammo, btn_drug, btn_misc;
   inventory_once;
   pressed_once;
   special;
   critter;
   dude_in_barter;

   //for trader
   t_menu_x;
   btn_trd_all, btn_trd_armor, btn_trd_weapon, btn_trd_ammo, btn_trd_drug, btn_trd_misc;
   trader_ptr;
   trd_inventory, critter_tbox, dude_enter_barter;

   //for trunk
   CNTR_USE;
   object_array;
   used, usedSkill, skill_object;
   right_create;

   loot_filter, loot_once;
   contr_use, contr_ptr;

   //for Array
   loot_reserv_item_array;
   container_array;
   container_count_array;
   trd_container_array;
   trd_container_count_array;

   inven_caps;
   inven_weight;
end

procedure start begin
variable counter, item, pid;

   if game_loaded then begin

      variable sfall_crafty := (sfall_ver_build == "sfall2" or sfall_ver_build == 509);
      sfall_new := sfall_crafty or (sfall_ver_major > 3); // for sFall 4.0+

      if not(sfall_crafty) then begin
         unsafe := get_ini_setting("ddraw.ini|Debugging|AllowUnsafeScripting");
         unsafe := unsafe and get_ini_setting("ddraw.ini|Debugging|Enable");
         if unsafe <= 0 then display_msg(get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgLoadW"));
         sfall_ver_allowed := (((100 * sfall_ver_major) + (10 * sfall_ver_minor) + sfall_ver_build) > 381);
      end else unsafe := true;

      // иcправление функции add_mult_objs_to_inven - если количество превышает 99999
      if (unsafe > 0) then write_int(0x45A2A0, 0x1869F);

      sfall_ver_allowed := (unsafe and sfall_ver_allowed) or sfall_crafty;

      enable_weight := get_ini_setting("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|ShowWeight");
      enable_caps := get_ini_setting("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|ShowCaps");
      enable_filter := not(get_sfall_global_int("INV_FLTR"));
      if enable_filter == false then
         display_msg(get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgInfo"));

      register_hook_proc(HOOK_MOUSECLICK, hMouseClick);
      register_hook_proc(HOOK_BARTERPRICE, hBarter);
      register_hook_proc(HOOK_USESKILL, hUseSkills);
      register_hook_proc(HOOK_KEYPRESS, hKeyPress);

      set_global_script_type(1);
      set_global_script_repeat(1 + (sfall_new * 10));

      screen_width_half := get_screen_width / 2;
      screen_height_half := get_screen_height / 2;
      if get_screen_height == 480 then shift_y := 50;
      right_create := true;

      loot_reserv_item_array := create_array_list(6);

      #if DEBUG
         // test items
         counter := 50;
         //item_caps_adjust(dude_obj, 1000);
         while counter > 0 do begin
            pid := random(1, 500);
            if get_proto_data(pid, PROTO_IT_TYPE) >= item_type_misc_item then begin
               item := create_object(pid, 0, 0);
               add_mult_objs_to_inven(dude_obj, item, 1);
               counter--;
            end
         end
      #endif
   end
   else if enable_filter then begin
      if (get_game_mode BWAND INTFACELOOT) then begin
         if loot_once == false then begin
            loot_once := true;
            call check_tile_object;
         end
         used := false; // для чего это нужно???
      end else if loot_once then begin
                  loot_once := false;
                  loot_filter := false;
               end
               else if not(sfall_new or loot_filter) and get_game_mode == 0 then
                        call Dude_LootParty; // only for standart sfall

      skill_object := 0; // обнуляем

      if not(sfall_new) and (dude_in_barter or loot_filter) and key_pressed(DIK_ESCAPE) then begin
         dude_in_barter := false;
         loot_filter := false;
      end

      if ((get_game_mode BWAND (INTFACEUSE BWOR INVENTORY BWOR BARTER)) or loot_filter
      or (not(sfall_new) and (get_game_mode BWAND DIALOG) and dude_in_barter)) then begin

         if key_pressed(DIK_LCONTROL) and (dude_in_barter or loot_filter) and not(trd_inventory) then begin
             if right_create then
               call CreateInvenFilterMenu_trader(loot_filter);
             else
               call CreateInvenFilterMenu_trd;
             createWin("inven_filter_back_left", menu_x, menu_y, 63, 150);
             selectWin("inven_filter_back_left");
             display("PCX\\inv_filter\\main_form.pcx");
             showWin;
             trd_inventory := true;
         end
         else if (dude_in_barter or loot_filter) and trd_inventory and not(key_pressed(DIK_LCONTROL)) then begin
             deleteWin("inven_filter_trd");
             deleteWin("inven_filter_back_left");
             trd_inventory := false;
             if loot_filter then right_create := true;
         end
         //inventory on
         if not inventory_once then begin
            inventory_once := true;

            call CreateInvenFilterMenu(loot_filter);
//            if loot_filter then begin
//               trader_ptr:=create_object(PID_MELEE_THUG_MALE, 1,2);
               //contr_ptr:=CNTR_PTR;  //contr_ptr:=party_member_obj(PID_CAR_TRUNK);
//            end
            if dude_in_barter or loot_filter then begin
              if critter_tbox == 0 then begin // only once
                  set_proto_data(RESERVED_ITEM00, PROTO_IT_INVFID, -1);
                  set_proto_data(RESERVED_ITEM00, PROTO_IT_WEIGHT, 0);
              end
              critter_tbox := create_object(PID_MELEE_THUG_MALE, 1, 2);
            end
         end
         if loot_filter then call Button_Toggle_Off;
      end
      else if inventory_once then begin
         //inventory off
         deleteWin("inven_filter");
         inventory_once := false;
         if critter then begin
            move_obj_inven_to_obj(critter, dude_obj);  //перемещаем обратно из временного в инвентарь игрока
            destroy_object(critter);
         end
         if not loot_filter then call restore_bags_items(dude_obj);  // for player
         if dude_enter_barter or contr_use then begin
            call Remove_ReservItem;
            if contr_use then begin
                contr_use := false;
                call restore_bags_items(contr_ptr);  // for trader
                move_obj_inven_to_obj(critter_tbox, contr_ptr);   //перемещаем обратно из временного в нтвентарь контейнера
                if trader_ptr then destroy_object(trader_ptr);    //удаляем временный криттер, если он создан
            end
            else begin
                move_obj_inven_to_obj(critter_tbox, trader_ptr);  //перемещаем обратно из временного в инвертарь торговца
                call restore_bags_items(trader_ptr);  // for trader
                if inven_weight then deleteWin("inven_weight");
                if inven_caps then deleteWin("inven_caps");
                inven_caps := false;
                inven_weight := false;
            end
            destroy_object(critter_tbox);
            deleteWin("inven_filter_back");
            if trd_inventory then begin
                deleteWin("inven_filter_back_left");
                deleteWin("inven_filter_trd");
            end
            trd_inventory := false;
            btn_trd_all := true;
            dude_enter_barter := false;
            dude_in_barter := false;
            right_create := true;
         end
         critter := 0;
         trader_ptr := 0;
      end
   end
end

procedure CreateInvenFilterMenu(variable loot) begin

   // параметры окна
   if (get_game_mode BWAND DIALOG) then begin
      menu_x := (screen_width_half) - 320;                  //-384   //-320 for olymp
      menu_y := (screen_height_half) - 150 + shift_y;       //+ 40   //-150  for olymp
   end
   else if loot then begin // for Loot inventar
      menu_x := (screen_width_half) - 330;
      if menu_x < 0 then menu_x := 0;
      menu_y := (screen_height_half) - 238;
   end
   else if (get_game_mode BWAND INTFACEUSE) then begin  // for USE inventar
      menu_x := (screen_width_half) - 208;
      menu_y := (screen_height_half) - 238;
   end
   else begin // for PC inventar
      menu_x := (screen_width_half) - 312;
      menu_y := (screen_height_half) - 238;
   end

   if loot or (get_game_mode BWAND DIALOG) then begin
      if loot then t_menu_x := (screen_width_half) + 269; else t_menu_x := (screen_width_half) + 255;
      createWin("inven_filter_back", t_menu_x, menu_y, 63, 150);
      selectWin("inven_filter_back");
      display("PCX\\inv_filter\\main_form.pcx");
      showWin;
      if not(loot) then begin
          if enable_weight then begin
             call barter_weight_win;
             inven_weight := true;
          end
          if enable_caps then begin
            call trader_cost_win;
            inven_caps := true;
          end
      end
   end

   //создание окна
   createWin("inven_filter", menu_x, menu_y, 63, 150);
   selectWin("inven_filter");
   display("PCX\\inv_filter\\main_form.pcx");
   if not(loot) then call Create_btn_all("on", 0);
   call Create_btn_armor("off", 0);
   call Create_btn_weapon("off", 0);
   call Create_btn_ammo("off", 0);
   call Create_btn_drug("off", 0);
   call Create_btn_misc("off", 0);
   showWin;

   if loot then btn_all := false; else btn_all := true;
   btn_armor := false;
   btn_weapon := false;
   btn_ammo := false;
   btn_drug := false;
   btn_misc := false;
   special := false;

end

procedure CreateInvenFilterMenu_trader(variable loot) begin
   // параметры окна
   if loot then
      t_menu_x := (screen_width_half) + 269; // for Loot
   else
      t_menu_x := (screen_width_half) + 255; // for Barter

   //создание окна
   createWin("inven_filter_trd", t_menu_x, menu_y, 63, 150);
   selectWin("inven_filter_trd");
   display("PCX\\inv_filter\\main_form.pcx");
   if not(loot) then call Create_btn_all("on", 1);
   call Create_btn_armor("off", 1);
   call Create_btn_weapon("off", 1);
   call Create_btn_ammo("off", 1);
   call Create_btn_drug("off", 1);
   call Create_btn_misc("off", 1);
   showWin;

   if loot then btn_trd_all := false; else btn_trd_all := true;
   btn_trd_armor := false;
   btn_trd_weapon := false;
   btn_trd_ammo := false;
   btn_trd_drug := false;
   btn_trd_misc := false;

   right_create := false;

end

procedure CreateInvenFilterMenu_trd begin

   //создание окна
   createWin("inven_filter_trd", t_menu_x, menu_y, 63, 150);
   selectWin("inven_filter_trd");
   display("PCX\\inv_filter\\main_form.pcx");

   if not(btn_trd_all and loot_filter) then call Create_btn_all("off", 1);
   if not(btn_trd_armor) then  call Create_btn_armor("off", 1);
   if not(btn_trd_weapon) then call Create_btn_weapon("off", 1);
   if not(btn_trd_ammo) then   call Create_btn_ammo("off", 1);
   if not(btn_trd_drug) then   call Create_btn_drug("off", 1);
   if not(btn_trd_misc) then   call Create_btn_misc("off", 1);

   // создать новую кнопку которая была нажата.
   if btn_trd_all then         call Create_btn_all("on", 1);
   else if btn_trd_armor then  call Create_btn_armor("on", 1);
   else if btn_trd_weapon then call Create_btn_weapon("on", 1);
   else if btn_trd_ammo then   call Create_btn_ammo("on", 1);
   else if btn_trd_drug then   call Create_btn_drug("on", 1);
   else if btn_trd_misc then   call Create_btn_misc("on", 1);

   showWin;

end

procedure filter_inventory(variable filter_item_type, variable spec) begin

variable item_counter, item, items, spec_item, item_count, crttr, no_count;

   spec_item := 7;
   if spec then begin
      if filter_item_type == item_type_ammo then
         spec_item := item_type_weapon;
      else
         spec_item := item_type_ammo;
   end

   if critter == 0 then critter := create_object(PID_MELEE_THUG_MALE, 1, 2);
   move_obj_inven_to_obj(critter, dude_obj);
   item_count := inven_count(dude_obj);

   if (loot_filter and item_count < 7) or (dude_enter_barter and item_count < 4) then begin
      no_count := true;
      call check_bags_items(dude_obj);
   end
   else if filter_item_type != (-1) then call check_bags_items(dude_obj);
   else call restore_bags_items(dude_obj);  //restore bags item for all

   if filter_item_type != (-1) then begin
      item_counter := filter_inventory_sub(filter_item_type, spec_item, dude_obj, critter);
   end
   else item_counter := inven_count(dude_obj);

   //показывать деньги сверху в режиме бартера и при выборе All
   if (get_game_mode BWAND DIALOG) or filter_item_type == (-1) then begin
      item := obj_carrying_pid_obj(dude_obj, PID_BOTTLE_CAPS);
      if item != 0 then begin
          call filter_remove_items(dude_obj, dude_obj, item, PID_BOTTLE_CAPS);
          //items := rm_mult_objs_from_inven(dude_obj, item, obj_is_carrying_obj_pid(dude_obj, PID_BOTTLE_CAPS));
          //item_caps_adjust(dude_obj, items); //add_mult_objs_to_inven(dude_obj, item, items);
      end
   end

   if (filter_item_type == item_type_misc_item and ((get_game_mode BWAND INVENTORY) /*or (get_game_mode BWAND DIALOG)*/)) then
      item_counter += restore_bags_items(dude_obj);  // restore bags item for misc item

   if dude_in_barter or loot_filter then begin
      if loot_filter then begin // принцип сортировки для LOOT интерфейса
         item_counter := inven_count(dude_obj);
         item_counter += inven_count(critter);
         // перемещаем инвентарь dude в инвентарь временного криттера (решение бага с надетой броней)
         crttr := Move_Dude_Inv;
         if item_counter <= 6 then call Add_ReservItem(item_counter, dude_obj, true);
         if not(no_count) then call restore_bags_items(dude_obj);  //restore bags item
         move_obj_inven_to_obj(critter, dude_obj);
         move_obj_inven_to_obj(crttr, dude_obj);
         destroy_object(crttr);
      end
      else if item_counter <= 3 then call Add_ReservItem(item_counter, dude_obj, true);
      //display_msg("count:"+item_count);
      tap_key(DIK_DOWNARROW);
      tap_key(DIK_UPARROW);
      while item_count > 0 do begin
         tap_key(DIK_UPARROW);
         item_count--;
      end
   end
   else begin
      tap_key(DIK_HOME);
      if sfall_ver_allowed and (get_game_mode BWAND INVENTORY) then call_offset_v0(0x471D5C);  /* display_stats_ */
   end

end

procedure filter_inventory_trader(variable filter_item_type) begin

variable item_counter, item, items, item_count, no_count;

   // создаем и перемещаем инвентарь контейнера в инвентарь криттера
   if loot_filter then begin
       if trader_ptr == 0 then trader_ptr := create_object(PID_MELEE_THUG_MALE, 1, 2);
       move_obj_inven_to_obj(contr_ptr, trader_ptr);
   end

   move_obj_inven_to_obj(critter_tbox, trader_ptr);
   item_count := inven_count(trader_ptr); //

   if (loot_filter and item_count < 7) or (dude_enter_barter and item_count < 4) then begin
       call check_bags_items(trader_ptr);
       no_count := true; // флаг нехватки предметов в инвентаре
   end
   else if filter_item_type != (-1) then call check_bags_items(trader_ptr);
   else call restore_bags_items(trader_ptr);  // restore bags item for trader - for select ALL

   if filter_item_type != (-1) then
      item_counter := filter_inventory_sub(filter_item_type, -1, trader_ptr, critter_tbox);
   else item_counter := inven_count(trader_ptr); //

   //показывать деньги сверху в режиме бартера
   if (get_game_mode BWAND DIALOG) then begin
      item := obj_carrying_pid_obj(trader_ptr, PID_BOTTLE_CAPS);
      if item != 0 then begin
          call filter_remove_items(trader_ptr, trader_ptr, item, PID_BOTTLE_CAPS);
          //items := rm_mult_objs_from_inven(trader_ptr, item, obj_is_carrying_obj_pid(trader_ptr, PID_BOTTLE_CAPS));
          //item_caps_adjust(trader_ptr, items); //add_mult_objs_to_inven(trader_ptr, item, items);
      end
      if filter_item_type == item_type_misc_item and not(no_count) then item_counter += restore_bags_items(trader_ptr);  // restore bags item for misc item
   end

   // принцип сортировки для LOOT интерфейса
   if loot_filter then begin
      if not(no_count) then call restore_bags_items(critter_tbox);  // restore bags item loot
      item_counter := inven_count(critter_tbox);
      item_counter += inven_count(trader_ptr);
      if item_counter <= 6 then call Add_ReservItem(item_counter, contr_ptr, false);
      //возвращаем инвентарь в контейнер
      move_obj_inven_to_obj(critter_tbox, contr_ptr);
      move_obj_inven_to_obj(trader_ptr, contr_ptr);
   end
   else if item_counter <= 3 then call Add_ReservItem(item_counter, trader_ptr, false); // добавить фантом предметы в инвентарь

   tap_key(DIK_DOWNARROW);
   tap_key(DIK_UPARROW);
   while item_count > 0 do begin
      tap_key(DIK_UPARROW);
      item_count--;
   end

end

procedure filter_inventory_sub(variable filter_item_type, variable spec_item, variable source_objptr, variable dest_objptr) begin

variable item_pid, item, item_counter := 0;

   while inven_ptr(source_objptr, item_counter) > 0 and item_counter < 1000 do begin
      item := inven_ptr(source_objptr, item_counter);
      item_pid := obj_pid(item);
//     debug_msg("item:"+obj_name(item));
//     debug_msg("counter" + item_counter);
      //если предмет деньги то остаются в инвентаре игрока
      if (obj_pid(item) != PID_BOTTLE_CAPS or loot_filter or (get_game_mode BWAND (INVENTORY BWOR INTFACEUSE))) then begin
         if filter_item_type < item_type_misc_item then begin
            if filter_item_type == item_type_drug then begin
               //debug_msg("drug item:"+obj_pid(item));
               //не исключаются drugs и некоторые придметы относящиеся к этому типу
               if obj_item_subtype(item) != item_type_drug and ExcludeMisc(item_pid) then begin
                  call filter_remove_items(source_objptr, dest_objptr, item, item_pid);
               end
               else item_counter++;
            end
            else begin
               //не исключаются предметы тип которых соответствует фильтру
               if obj_item_subtype(item) != filter_item_type and obj_item_subtype(item) != spec_item then begin
                  // для фильтра оружие не удаляем динамиты
                  if filter_item_type == item_type_weapon and (Explosive(item_pid)) then
                     item_counter++;
                  else begin
                     call filter_remove_items(source_objptr, dest_objptr, item, item_pid);
                  end
               end else item_counter++;
            end
         end
         else if filter_item_type == item_type_misc_group then begin
                  //неисключаются полезные вещи из категории misc
                  if (MiscGroup(item_pid)) and obj_item_subtype(item) >= item_type_misc_item then
                     item_counter++;
                  else begin
                     call filter_remove_items(source_objptr, dest_objptr, item, item_pid);
                  end
         end //не исключаются misc и key
         else if obj_item_subtype(item) != item_type_misc_item and obj_item_subtype(item) != item_type_key_item
         or (IncludeMisc(item_pid) or Explosive(item_pid)) then begin
              call filter_remove_items(source_objptr, dest_objptr, item, item_pid);
         end
         else item_counter++;
      end
      else begin
         item_counter++;
      end
   end

   return item_counter;
end

procedure filter_remove_items(variable source_objptr, variable dest_objptr, variable item, variable item_pid) begin

   variable items := rm_mult_objs_from_inven(source_objptr, item, obj_is_carrying_obj_pid(source_objptr, item_pid)); // obj_is_carrying_obj(source_objptr, item)

   // иправления бага функции add_mult_objs_to_inven - если количество превышает 99999
   if (item_pid == PID_BOTTLE_CAPS and items > 99999) then
      item_caps_adjust(dest_objptr, items);
   else
      add_mult_objs_to_inven(dest_objptr, item, items);

   //debug_msg("remove item:"+obj_name(item));

end

procedure check_tile_object begin
variable objptr, objtype, m;

   debug_msg("Filter: Check tile object.");

   if skill_object > 0 then begin
      debug_msg("  >>>  used skill object.");
      object_array := create_array_list(1);
      object_array[0] := skill_object;
      objtype := obj_item_subtype(skill_object);

      skill_object := 0; // обнуляем
   end else begin
      object_array := tile_get_objs(tile_num_in_direction(dude_tile, dude_cur_rot, 1), dude_elevation);

      //находим в массиве первый найденный контейнер
      while objtype != item_type_container and object_array[m] > 0 do begin
         objtype := obj_item_subtype(object_array[m]);
         m++;
      end
   end

   if objtype == item_type_container then
      contr_ptr := object_array[m - 1];   // указатель на контейнер
   else begin
      objtype := Check_Party_Obj;         // проверка на обмен с партийцем
      if objtype != (-1) then
         contr_ptr := objtype;            // указатель на партийца
      else contr_ptr := 0;
   end

   if contr_ptr > 0 then begin
      loot_filter := true;
      contr_use := true;
   end

   clear_array(object_array);

end

procedure Check_Party_Obj begin

variable n, len, party_array;

   party_array := party_member_list_all; // тут все ptr партийцев
   len := len_array(party_array);
   for (n := 1; n < len; n++) begin
      if is_in_array(party_array[n], object_array) then
         return party_array[n]; // возвращаем указатель на партийца
   end

   return -1;  //это не партийцец в массиве объекта
end

procedure Dude_LootParty begin

variable objptr;

   if not(used) and art_anim(obj_art_fid(dude_obj)) == ANIM_magic_hands_middle then begin
      CNTR_USE := dude_tile;
      used := true;
      usedSkill := false;
   end
   else if used then begin
      if CNTR_USE == dude_tile and not(anim_busy(dude_obj)) and not(usedSkill) then begin
         object_array := tile_get_objs(tile_num_in_direction(dude_tile, dude_cur_rot, 1), dude_elevation);
         objptr := Check_Party_Obj;
         if objptr != (-1) then begin
            contr_ptr := objptr;
            loot_filter := true;
            contr_use := true;
         end else contr_ptr := 0;
         CNTR_USE := -1;
         used := false;
         clear_array(object_array);
      end
      else if CNTR_USE != dude_tile then used := false;
      if usedSkill then used := false;
   end

end

procedure check_bags_items(variable who_ptr) begin

variable t1_array, t2_array, item, i, n := 0;

   //check item containers
   t1_array := temp_array_list(1);
   while inven_ptr(who_ptr, i) > 0 and i < 1000 do begin
      item := inven_ptr(who_ptr, i);
      if obj_item_subtype(item) == item_type_container then begin
         t1_array[n] := item;
         n++;
         resize_array(t1_array, n + 1);
      end
      i++;
   end
   //remove item containers
   if n > 0 then begin
      debug_msg("Filter: check bags...");
      t2_array := temp_array_list(n);
      for (i := 0; i < n; i++) begin
         t2_array[i] := obj_is_carrying_obj_pid(who_ptr, obj_pid(t1_array[i]));
         rm_obj_from_inven(who_ptr, t1_array[i]);
      end
      debug_msg("   remove items container count: "+i);
      i := 0;
      if who_ptr == dude_obj then begin
         if not(array_exists(container_array)) then begin
            //create copy array
            n := len_array(t1_array);
            container_array := create_array_list(n);
            foreach (i: item in t1_array) begin
               container_array[i] := item;
            end
            container_count_array := create_array_list(n);
            foreach (i: item in t2_array) begin
               container_count_array[i] := item;
            end
         end
         else begin
            //add to array
            n := len_array(container_array) - 1;
            item := len_array(t1_array) - 1;
            resize_array(container_array, (n + item) + 1);
            resize_array(container_count_array, (n + item) + 1);
            //display_msg("resize len container_array: "+(len_array(container_array)-1));
            for (i := 0; i < item; i++) begin
               container_array[n + i] := t1_array[i];
               container_count_array[n + i] := t2_array[i];
            end
            debug_msg("  new containers add to dude array, count: "+i);
         end
      end
      else begin
         if not(array_exists(trd_container_array)) then begin
            //create copy array
            trd_container_array:=create_array_list(len_array(t1_array));
            foreach (i: item in t1_array) begin
               trd_container_array[i] := item;
            end
            trd_container_count_array:=create_array_list(len_array(t2_array));
            foreach (i: item in t2_array) begin
               trd_container_count_array[i] := item;
            end
         end
         else begin
            //add to array
            n := len_array(trd_container_array) - 1;
            item := len_array(t1_array) - 1;
            resize_array(trd_container_array, (n + item) + 1);
            resize_array(trd_container_count_array, (n + item) + 1);
            for (i := 0; i < item; i++) begin
               trd_container_array[n + i] := t1_array[i];
               trd_container_count_array[n + i] := t2_array[i];
            end
            debug_msg("   new containers add to trader/loot array, count: "+i);
         end
      end
   end //else display_msg("   No items container.");

end

procedure restore_bags_items(variable who_ptr) begin
variable i, n, w;

   if who_ptr==dude_obj then begin
      if array_exists(container_array) then begin
         n := len_array(container_array) - 1;
         for (i := 0; i < n; i++) begin
            add_mult_objs_to_inven(dude_obj, container_array[i], container_count_array[i]);
         end
         free_array(container_array);
         free_array(container_count_array);
         debug_msg("Filter: restore dude item bags. Count: "+i);
      end
   end
   else begin
      if array_exists(trd_container_array) then begin
         n := len_array(trd_container_array) - 1;
         for (i := 0; i < n; i++) begin
            add_mult_objs_to_inven(who_ptr, trd_container_array[i], trd_container_count_array[i]);
         end
         free_array(trd_container_array);
         free_array(trd_container_count_array);
         debug_msg("Filter: restore trader/loot item bags. Count: "+i);
      end
   end

   return i;
end

procedure Move_Dude_Inv begin

variable crtr,item_ptr,items;

   crtr := create_object(PID_MELEE_THUG_MALE, 1, 2);

   while inven_ptr(dude_obj, 0) > 0 do begin
      item_ptr := inven_ptr(dude_obj, 0);
      call filter_remove_items(dude_obj, crtr, item_ptr, obj_pid(item_ptr));
   end

   return crtr;
end

procedure Add_ReservItem(variable i_count, variable obj_ptr, variable pc) begin
/****************** Код для перересовки итемов в слоте ******************/
variable i, crtr;

   //добавить фантом предметы в инвентарь
   //debug_msg("count:"+i_count); //i_count - колличество предметов в инвентаре

   if pc then
      crtr := Move_Dude_Inv; // перемещаем инвентарь dude в инвентарь временного криттера (решение бага с надетой броней)
   else begin
      crtr := create_object(PID_MELEE_THUG_MALE, 1, 2);
      move_obj_inven_to_obj(obj_ptr, crtr);
   end

   // при 6-6=0 - цикл выполнится 1 раз, 3-0=6 - цикл выполнится 4 раза
   if loot_filter then
      i_count := 6 - i_count;
   else
      i_count := 3 - i_count;

   for (i := 0; i <= i_count; i++) begin
      loot_reserv_item_array[i]:=create_object_sid(RESERVED_ITEM00, 1, 2, 2);
      add_obj_to_inven(obj_ptr, loot_reserv_item_array[i]);
   end

   move_obj_inven_to_obj(crtr, obj_ptr);
   destroy_object(crtr);

end

procedure Remove_ReservItem begin
variable i;

   for (i := 0; i < 6; i++) begin
      if loot_reserv_item_array[i] != 0 then begin
         destroy_object(loot_reserv_item_array[i]);
         loot_reserv_item_array[i] := 0;
      end
   end

end

procedure hBarter begin

variable temp;

   if not(enable_filter) then return;

   temp := get_sfall_arg;
   trader_ptr := get_sfall_arg;

   dude_in_barter := true;
   dude_enter_barter := true;

   //создание окна для отображения налички у торговца
   if inven_caps then begin
      deleteWin("inven_caps");
      call trader_cost_win;
   end
   //создание окна для отображения веса у игрока
   if inven_weight then begin
      deleteWin("inven_weight");
      call barter_weight_win;
   end

end

procedure hUseSkills begin

variable temp;

   if not(enable_filter) then
      return;

   temp := get_sfall_arg;
   temp := get_sfall_arg;
   if get_sfall_arg != SKILL_STEAL then
      usedSkill := true;
   else
      skill_object := temp;

end

procedure hKeyPress begin

variable type  := get_sfall_arg,
         key   := get_sfall_arg;

   if key == DIK_F2 and get_game_mode == 0 and type == 0 then begin
      if enable_filter then begin
         enable_filter := false;
         //"Inventory Filter is disabled."
         display_msg(get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgOff"));
      end
      else begin
         enable_filter := true;
         //"Inventory Filter is enabled."
         display_msg(get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgOn") + SCRIPT_VERSION);
      end
      set_sfall_global("INV_FLTR", not(enable_filter));
   end

end

procedure hMouseClick begin

variable type, button;

   if not(enable_filter) then return;

   if ((get_game_mode BWAND (INTFACEUSE BWOR INVENTORY)) or dude_enter_barter or loot_filter) then begin

      type   := get_sfall_arg;   //event type: 1 - pressed, 0 - released
      button := get_sfall_arg;   //button number (0 - left, 1 - right, up to 7)

      if (dude_in_barter or loot_filter) and type == 0 then call Remove_ReservItem;

      if button == 0 then begin
         if type == 1 then begin
             x_mouse := get_mouse_x;
             y_mouse := get_mouse_y;
         end

         if not(sfall_new) then begin
            if type == 0 and button_exit_barter and dude_enter_barter and button_exit_barter_check then
               dude_in_barter := false;                            //(get_game_mode BWAND INTFACELOOT)
            if type == 0 and button_exit_loot and loot_filter and not(dude_enter_barter) and button_exit_loot_check then
               loot_filter := false;
         end

         if inven_filter_button_all and not(btn_all) and not(trd_inventory) and not(loot_filter) then //button all no filter
            call inven_filter_button_pressed("all", -1, false);
         else if inven_filter_button_armor and not(btn_armor) and not(trd_inventory) then       //button armor
            call inven_filter_button_pressed("armor", item_type_armor, false);
         else if inven_filter_button_weapon and not(btn_weapon) and not(trd_inventory) then     //button weapon
            call inven_filter_button_pressed("weapon", item_type_weapon, false);
         else if inven_filter_button_ammo and not(btn_ammo) and not(trd_inventory) then         //button ammo
            call inven_filter_button_pressed("ammo", item_type_ammo, false);
         else if inven_filter_button_drug and not(btn_drug) and not(trd_inventory) then         //button drug
            call inven_filter_button_pressed("drug", item_type_drug, false);
         else if inven_filter_button_misc and not(btn_misc) and not(trd_inventory) then begin   //button mis
            call inven_filter_button_pressed("misc", item_type_misc_item, false);
            sec_click := true;
         end //for trader/loot
         else if inven_filter_trd_button_all and not(btn_trd_all) and trd_inventory and not(loot_filter) then //button all no filter
            call inven_filter_trd_button_pressed("all", -1);
         else if inven_filter_trd_button_armor and not(btn_trd_armor) and trd_inventory then    //button armor
            call inven_filter_trd_button_pressed("armor", item_type_armor);
         else if inven_filter_trd_button_weapon and not(btn_trd_weapon) and trd_inventory then  //button weapon
            call inven_filter_trd_button_pressed("weapon", item_type_weapon);
         else if inven_filter_trd_button_ammo and not(btn_trd_ammo) and trd_inventory then      //button ammo
            call inven_filter_trd_button_pressed("ammo", item_type_ammo);
         else if inven_filter_trd_button_drug and not(btn_trd_drug) and trd_inventory then      //button drug
            call inven_filter_trd_button_pressed("drug", item_type_drug);
         else if inven_filter_trd_button_misc and not(btn_trd_misc) and trd_inventory then      //button mis
            call inven_filter_trd_button_pressed("misc", item_type_misc_item);

      end // клик средней кнопкой мышки по кнопкам патроны или оружие
      else if button == 2 then begin
         if (btn_ammo or btn_weapon) then begin
            if inven_filter_button_ammo and not(btn_ammo) then                     //button ammo
              call inven_filter_button_pressed("ammo", item_type_ammo, true);
            else if inven_filter_button_weapon and not(btn_weapon) then            //button weapon
              call inven_filter_button_pressed("weapon", item_type_weapon, true);
         end
         if inven_filter_button_misc and (not(btn_misc) or sec_click) then begin   //button misc
            call inven_filter_button_pressed("misc", item_type_misc_group, false);
            sec_click := false;
         end
      end

      if pressed_once and type == 0 then pressed_once := false;
   end

end

procedure inven_filter_button_toggle(variable p_btn, variable spec) begin

   if loot_filter then btn_toggle_off := true;

   selectWin("inven_filter");
   if not((spec) and (btn_ammo or btn_weapon)) then begin
      call create_btn_sub;
      if special then begin
         call DeletePressButton;
         call Create_btn_ammo("off", false);
         special := false;
      end
   end else special := true;

   call SelectCreateButton(p_btn, false);

//   debug_msg("btn_all: "+ btn_all);
//   debug_msg("btn_armor: "+ btn_armor);
//   debug_msg("btn_weapon:" + btn_weapon);
//   debug_msg("btn_ammo:" + btn_ammo);
//   debug_msg("btn_drug:" + btn_drug);
//   debug_msg("btn_misc:" + btn_misc);
//   debug_msg("-----end------");

   showWin;

end

procedure inven_filter_button_pressed(variable p_btn, variable filter_item_type, variable spec) begin

variable _curr_stack, text;

   if not(pressed_once) then begin
      pressed_once := true;

      if unsafe > 0 then _curr_stack := read_int(0x59E96C);  // проверить открыты ли сумки
      if _curr_stack > 0 then begin
         play_sfx("IISXXXX1");
         text := get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgWarning");
         if not(dude_in_barter) then create_message_window(text); else display_msg(text);
      end
      else begin
         play_sfx("IB2P1XX1");
         call inven_filter_button_toggle(p_btn, spec);  //button down so highlight!
         call filter_inventory(filter_item_type, spec);
      end
   end

end

procedure inven_filter_trd_button_toggle(variable p_btn) begin

   if loot_filter then btn_trd_toggle_off := true;

   selectWin("inven_filter_trd");
   call create_btn_trd_sub;
   call SelectCreateButton(p_btn, true);
   showWin;

end

procedure inven_filter_trd_button_pressed(variable p_btn, variable filter_item_type) begin

variable _target_curr_stack, text;

   if not(pressed_once) then begin
      pressed_once := true;

      if unsafe > 0 then _target_curr_stack:=read_int(0x59E948);  // проверить открыты ли сумки у цели
      if _target_curr_stack > 0 then begin
         play_sfx("IISXXXX1");
         text := get_ini_string("./data/PCX/inv_filter/InvenFilter.ini|InventoryFilter|MsgWarning");
         if loot_filter then create_message_window(text); else display_msg(text);
      end
      else begin
         play_sfx("IB2P1XX1");
         call inven_filter_trd_button_toggle(p_btn);  //button down so highlight!
         call filter_inventory_trader(filter_item_type);
      end
   end

end

procedure Button_Toggle_Off begin

   if get_mouse_buttons == 0 then begin
      if btn_toggle_off then begin
         btn_toggle_off := false;
         selectWin("inven_filter");
         call create_btn_sub;
         showWin;
      end
      else if btn_trd_toggle_off then begin
         btn_trd_toggle_off := false;
         selectWin("inven_filter_trd");
         call create_btn_trd_sub;
         showWin;
      end
   end

end

procedure SelectCreateButton(variable p_btn, variable flag) begin

   //удалить кнопку которая была нажата
   call subDeleteButton(p_btn, "off", flag);

   // создать новую кнопку которая была нажата.
   switch p_btn begin
      case "all"    : call Create_btn_all("on", flag);
      case "armor"  : call Create_btn_armor("on", flag);
      case "weapon" : call Create_btn_weapon("on", flag);
      case "ammo"   : call Create_btn_ammo("on", flag);
      case "drug"   : call Create_btn_drug("on", flag);
      case "misc"   : call Create_btn_misc("on", flag);
   end

end

procedure create_btn_sub begin

   // удалить предыдущую нажатую кнопку
   call DeletePressButton;

   //создать на месте удаленноей кнопки новую кнопку (закрыть дыру)
   if btn_all then         call Create_btn_all("off", 0);
   else if btn_armor then  call Create_btn_armor("off", 0);
   else if btn_weapon then call Create_btn_weapon("off", 0);
   else if btn_ammo then   call Create_btn_ammo("off", 0);
   else if btn_drug then   call Create_btn_drug("off", 0);
   else if btn_misc then   call Create_btn_misc("off", 0);

end

procedure create_btn_trd_sub begin

   // удалить предыдущую нажатую кнопку
   call DeletePressButtonTrd;

   //создать на месте удаленноей кнопки новую кнопку (закрыть дыру)
   if btn_trd_all then         call Create_btn_all("off", 1);
   else if btn_trd_armor then  call Create_btn_armor("off", 1);
   else if btn_trd_weapon then call Create_btn_weapon("off", 1);
   else if btn_trd_ammo then   call Create_btn_ammo("off", 1);
   else if btn_trd_drug then   call Create_btn_drug("off", 1);
   else if btn_trd_misc then   call Create_btn_misc("off", 1);

end

procedure Create_btn_all(variable flag, variable trd) begin

   call subCreateButton("all", flag, trd, 0);

   if not(trd) then begin
       if flag == "on" then btn_all := true; else btn_all := false;
   end else if flag == "on" then btn_trd_all := true; else btn_trd_all := false;

end

procedure Create_btn_armor(variable flag, variable trd) begin

   call subCreateButton("armor", flag, trd, 1);

   if not(trd) then begin
      if flag == "on" then btn_armor := true; else btn_armor := false;
   end else if flag == "on" then btn_trd_armor := true; else btn_trd_armor := false;

end

procedure Create_btn_weapon(variable flag, variable trd) begin

   call subCreateButton("weapon", flag, trd, 2);

   if not(trd) then begin
       if flag == "on" then btn_weapon := true; else btn_weapon := false;
   end else if flag == "on" then btn_trd_weapon := true; else btn_trd_weapon := false;

end

procedure Create_btn_ammo(variable flag, variable trd) begin

   call subCreateButton("ammo", flag, trd, 3);

   if not(trd) then begin
       if flag == "on" then btn_ammo := true; else btn_ammo := false;
   end else if flag == "on" then btn_trd_ammo := true; else btn_trd_ammo := false;

end

procedure Create_btn_drug(variable flag, variable trd) begin

   call subCreateButton("drug", flag, trd, 4);

   if not(trd) then begin
       if flag == "on" then btn_drug := true; else btn_drug := false;
   end else if flag == "on" then btn_trd_drug := true; else btn_trd_drug := false;

end

procedure Create_btn_misc(variable flag, variable trd) begin

   call subCreateButton("misc", flag, trd, 5);

   if not(trd) then begin
       if flag == "on" then btn_misc := true; else btn_misc := false;
   end else if flag == "on" then btn_trd_misc := true; else btn_trd_misc := false;

end

procedure subCreateButton(variable btn, variable flag, variable trd, variable vshift) begin

   variable btn_name, btn_on, btn_off, btn_hover;

   btn_name  := "filter_" + btn + "_" + flag + trd;
   btn_on    := "PCX\\inv_filter\\btn_" + btn + "_on.pcx";
   btn_off   := "PCX\\inv_filter\\btn_" + btn + "_" + flag + ".pcx";
   btn_hover := "PCX\\inv_filter\\btn_" + btn + "_hover_" + flag + ".pcx";

   addButton(btn_name, x_loc, 1 + y_loc + (vertic_size * vshift), horiz_size, 20);
   addButtonGfx(btn_name, btn_on, btn_off, btn_hover);
   addButtonProc(btn_name, None, None, None, None);  // inven buttons don't work

end

procedure DeletePressButton begin

variable btn;

   if btn_all then         btn := "all";
   else if btn_armor then  btn := "armor";
   else if btn_weapon then btn := "weapon";
   else if btn_ammo then   btn := "ammo";
   else if btn_drug then   btn := "drug";
   else if btn_misc then   btn := "misc";
   else return;

   call subDeleteButton(btn, "on", false);

end

procedure DeletePressButtonTrd begin

variable btn;

   if btn_trd_all then         btn:= "all";
   else if btn_trd_armor then  btn:= "armor";
   else if btn_trd_weapon then btn:= "weapon";
   else if btn_trd_ammo then   btn:= "ammo";
   else if btn_trd_drug then   btn:= "drug";
   else if btn_trd_misc then   btn:= "misc";
   else return;

   call subDeleteButton(btn, "on", true);

end

procedure subDeleteButton(variable btn, variable type, variable flag) begin

   deleteButton("filter_" + btn + "_" + type + flag);

end

procedure trader_cost_win begin

   //создание окна для отображения налички у торговца
   createWin("inven_caps", t_menu_x - 10, menu_y + 258, 50, 10);
   selectWin("inven_caps");
   FillWin(0.25, 0.25, 0.25);
   SetTextColor(0.0, 1.0, 0.0);
   GotoXY(0, 0);
   Format("$" + item_caps_total(trader_ptr), 0, 2, 50, 10, justifycenter);
   showWin;

end

procedure barter_weight_win begin

   variable carry := who_carry_amount(dude_obj);
   if critter then carry += who_carry_amount(critter);

   //создание окна для отображения налички у торговца
   createWin("inven_weight", menu_x + 25, menu_y + 260, 50, 10);
   selectWin("inven_weight");
   FillWin(0.25, 0.25, 0.25);
   SetTextColor(0.0, 1.0, 0.0);
   GotoXY(0, 0);
   Format("w: " + carry, 2, 2, 50, 10, justifyleft);
   showWin;

end

procedure None begin
end
